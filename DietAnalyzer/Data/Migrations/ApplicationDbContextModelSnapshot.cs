// <auto-generated />
using System;
using DietAnalyzer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DietAnalyzer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DietAnalyzer.Models.Domains.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.DietItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("MeasureId");

                    b.ToTable("DietItems");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.EvaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("NutrientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suggestions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("EvaluationResults");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "spinach"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bananas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "eggs"
                        },
                        new
                        {
                            Id = 4,
                            Name = "yogurt"
                        },
                        new
                        {
                            Id = 5,
                            Name = "chicken breast"
                        },
                        new
                        {
                            Id = 6,
                            Name = "salmon"
                        },
                        new
                        {
                            Id = 7,
                            Name = "bread (rye)"
                        },
                        new
                        {
                            Id = 8,
                            Name = "potatoes"
                        });
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.FoodMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentlyLinked")
                        .HasColumnType("bit");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("MeasureId");

                    b.ToTable("FoodMeasures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FoodItemId = 1,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 2,
                            FoodItemId = 2,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 3,
                            FoodItemId = 3,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 4,
                            FoodItemId = 4,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 5,
                            FoodItemId = 5,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 6,
                            FoodItemId = 6,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 7,
                            FoodItemId = 7,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 8,
                            FoodItemId = 8,
                            IsCurrentlyLinked = true,
                            MeasureId = 1
                        },
                        new
                        {
                            Id = 10,
                            FoodItemId = 2,
                            IsCurrentlyLinked = true,
                            MeasureId = 2
                        },
                        new
                        {
                            Id = 19,
                            FoodItemId = 3,
                            IsCurrentlyLinked = true,
                            MeasureId = 3
                        },
                        new
                        {
                            Id = 31,
                            FoodItemId = 7,
                            IsCurrentlyLinked = true,
                            MeasureId = 4
                        });
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Grams")
                        .HasColumnType("real");

                    b.Property<bool>("IsPubliclyKnown")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Measures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grams = 1f,
                            IsPubliclyKnown = true,
                            Name = "grams"
                        },
                        new
                        {
                            Id = 2,
                            Grams = 135f,
                            IsPubliclyKnown = false,
                            Name = "large bananas"
                        },
                        new
                        {
                            Id = 3,
                            Grams = 50f,
                            IsPubliclyKnown = false,
                            Name = "large eggs"
                        },
                        new
                        {
                            Id = 4,
                            Grams = 35f,
                            IsPubliclyKnown = false,
                            Name = "slices"
                        });
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.NutritionDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("CalciumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("CaloriesPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("CarbohydratesPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("CopperPer100g")
                        .HasColumnType("real");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<float?>("FatsPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("FiberPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("IronPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("MagnesiumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("ManganesePer100g")
                        .HasColumnType("real");

                    b.Property<float?>("PhosphorusPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("PotassiumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("ProteinsPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SaturatedFatPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SeleniumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SodiumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SugarPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminAPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB12Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB1Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB2Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB3Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB6Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB9Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminCPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminDPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminEPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminKPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("ZincPer100g")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DietId")
                        .IsUnique();

                    b.ToTable("NutritionDiets");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.NutritionFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("CalciumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("CaloriesPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("CarbohydratesPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("CopperPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("FatsPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("FiberPer100g")
                        .HasColumnType("real");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<float?>("IronPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("MagnesiumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("ManganesePer100g")
                        .HasColumnType("real");

                    b.Property<float?>("PhosphorusPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("PotassiumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("ProteinsPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SaturatedFatPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SeleniumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SodiumPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("SugarPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminAPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB12Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB1Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB2Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB3Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB6Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB9Per100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminCPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminDPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminEPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminKPer100g")
                        .HasColumnType("real");

                    b.Property<float?>("ZincPer100g")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId")
                        .IsUnique();

                    b.ToTable("NutritionFoods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalciumPer100g = 3f,
                            CaloriesPer100g = 23f,
                            CarbohydratesPer100g = 3.6f,
                            CopperPer100g = 2f,
                            FatsPer100g = 0.4f,
                            FiberPer100g = 2.2f,
                            FoodItemId = 1,
                            IronPer100g = 5f,
                            MagnesiumPer100g = 6f,
                            ManganesePer100g = 13f,
                            PhosphorusPer100g = 1f,
                            PotassiumPer100g = 5f,
                            ProteinsPer100g = 2.9f,
                            SaturatedFatPer100g = 0.1f,
                            SeleniumPer100g = 0f,
                            SodiumPer100g = 3f,
                            SugarPer100g = 0.4f,
                            VitaminAPer100g = 188f,
                            VitaminB12Per100g = 0f,
                            VitaminB1Per100g = 5f,
                            VitaminB2Per100g = 11f,
                            VitaminB3Per100g = 4f,
                            VitaminB6Per100g = 10f,
                            VitaminB9Per100g = 49f,
                            VitaminCPer100g = 47f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 10f,
                            VitaminKPer100g = 604f,
                            ZincPer100g = 1f
                        },
                        new
                        {
                            Id = 2,
                            CalciumPer100g = 1f,
                            CaloriesPer100g = 89f,
                            CarbohydratesPer100g = 22.8f,
                            CopperPer100g = 4f,
                            FatsPer100g = 0.3f,
                            FiberPer100g = 2.6f,
                            FoodItemId = 2,
                            IronPer100g = 1f,
                            MagnesiumPer100g = 7f,
                            ManganesePer100g = 13f,
                            PhosphorusPer100g = 2f,
                            PotassiumPer100g = 10f,
                            ProteinsPer100g = 1.1f,
                            SaturatedFatPer100g = 0.1f,
                            SeleniumPer100g = 1f,
                            SodiumPer100g = 0f,
                            SugarPer100g = 12.2f,
                            VitaminAPer100g = 1f,
                            VitaminB12Per100g = 0f,
                            VitaminB1Per100g = 2f,
                            VitaminB2Per100g = 4f,
                            VitaminB3Per100g = 3f,
                            VitaminB6Per100g = 18f,
                            VitaminB9Per100g = 5f,
                            VitaminCPer100g = 15f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 1f,
                            VitaminKPer100g = 1f,
                            ZincPer100g = 1f
                        },
                        new
                        {
                            Id = 3,
                            CalciumPer100g = 5f,
                            CaloriesPer100g = 155f,
                            CarbohydratesPer100g = 1.1f,
                            CopperPer100g = 1f,
                            FatsPer100g = 10.6f,
                            FiberPer100g = 0f,
                            FoodItemId = 3,
                            IronPer100g = 7f,
                            MagnesiumPer100g = 2f,
                            ManganesePer100g = 1f,
                            PhosphorusPer100g = 17f,
                            PotassiumPer100g = 4f,
                            ProteinsPer100g = 12.6f,
                            SaturatedFatPer100g = 3.3f,
                            SeleniumPer100g = 44f,
                            SodiumPer100g = 5f,
                            SugarPer100g = 1.1f,
                            VitaminAPer100g = 12f,
                            VitaminB12Per100g = 19f,
                            VitaminB1Per100g = 4f,
                            VitaminB2Per100g = 30f,
                            VitaminB3Per100g = 0f,
                            VitaminB6Per100g = 6f,
                            VitaminB9Per100g = 11f,
                            VitaminCPer100g = 0f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 5f,
                            VitaminKPer100g = 0f,
                            ZincPer100g = 7f
                        },
                        new
                        {
                            Id = 4,
                            CalciumPer100g = 12f,
                            CaloriesPer100g = 61f,
                            CarbohydratesPer100g = 4.7f,
                            CopperPer100g = 0f,
                            FatsPer100g = 3.3f,
                            FiberPer100g = 0f,
                            FoodItemId = 4,
                            IronPer100g = 0f,
                            MagnesiumPer100g = 3f,
                            ManganesePer100g = 0f,
                            PhosphorusPer100g = 9f,
                            PotassiumPer100g = 4f,
                            ProteinsPer100g = 3.5f,
                            SaturatedFatPer100g = 2.1f,
                            SeleniumPer100g = 3f,
                            SodiumPer100g = 2f,
                            SugarPer100g = 4.7f,
                            VitaminAPer100g = 2f,
                            VitaminB12Per100g = 6f,
                            VitaminB1Per100g = 2f,
                            VitaminB2Per100g = 8f,
                            VitaminB3Per100g = 0f,
                            VitaminB6Per100g = 2f,
                            VitaminB9Per100g = 2f,
                            VitaminCPer100g = 1f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 0f,
                            VitaminKPer100g = 0f,
                            ZincPer100g = 4f
                        },
                        new
                        {
                            Id = 5,
                            CalciumPer100g = 1f,
                            CaloriesPer100g = 79f,
                            CarbohydratesPer100g = 0.2f,
                            CopperPer100g = 2f,
                            FatsPer100g = 0.4f,
                            FiberPer100g = 0f,
                            FoodItemId = 5,
                            IronPer100g = 2f,
                            MagnesiumPer100g = 2f,
                            ManganesePer100g = 2f,
                            PhosphorusPer100g = 6f,
                            PotassiumPer100g = 2f,
                            ProteinsPer100g = 16.8f,
                            SaturatedFatPer100g = 0.1f,
                            SeleniumPer100g = 11f,
                            SodiumPer100g = 45f,
                            SugarPer100g = 0.1f,
                            VitaminAPer100g = 0f,
                            VitaminB12Per100g = 1f,
                            VitaminB1Per100g = 1f,
                            VitaminB2Per100g = 2f,
                            VitaminB3Per100g = 17f,
                            VitaminB6Per100g = 8f,
                            VitaminB9Per100g = 0f,
                            VitaminCPer100g = 0f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 0f,
                            VitaminKPer100g = 0f,
                            ZincPer100g = 2f
                        },
                        new
                        {
                            Id = 6,
                            CalciumPer100g = 1f,
                            CaloriesPer100g = 206f,
                            CarbohydratesPer100g = 0f,
                            CopperPer100g = 2f,
                            FatsPer100g = 12.3f,
                            FiberPer100g = 0f,
                            FoodItemId = 6,
                            IronPer100g = 2f,
                            MagnesiumPer100g = 8f,
                            ManganesePer100g = 1f,
                            PhosphorusPer100g = 25f,
                            PotassiumPer100g = 11f,
                            ProteinsPer100g = 22.1f,
                            SaturatedFatPer100g = 2.5f,
                            SeleniumPer100g = 59f,
                            SodiumPer100g = 3f,
                            SugarPer100g = 0f,
                            VitaminAPer100g = 1f,
                            VitaminB12Per100g = 47f,
                            VitaminB1Per100g = 23f,
                            VitaminB2Per100g = 8f,
                            VitaminB3Per100g = 40f,
                            VitaminB6Per100g = 32f,
                            VitaminB9Per100g = 8f,
                            VitaminCPer100g = 6f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 0f,
                            VitaminKPer100g = 0f,
                            ZincPer100g = 3f
                        },
                        new
                        {
                            Id = 7,
                            CalciumPer100g = 7f,
                            CaloriesPer100g = 258f,
                            CarbohydratesPer100g = 48.3f,
                            CopperPer100g = 9f,
                            FatsPer100g = 3.3f,
                            FiberPer100g = 5.8f,
                            FoodItemId = 7,
                            IronPer100g = 16f,
                            MagnesiumPer100g = 10f,
                            ManganesePer100g = 41f,
                            PhosphorusPer100g = 12f,
                            PotassiumPer100g = 5f,
                            ProteinsPer100g = 8.5f,
                            SaturatedFatPer100g = 0.6f,
                            SeleniumPer100g = 44f,
                            SodiumPer100g = 27f,
                            SugarPer100g = 3.8f,
                            VitaminAPer100g = 0f,
                            VitaminB12Per100g = 0f,
                            VitaminB1Per100g = 29f,
                            VitaminB2Per100g = 20f,
                            VitaminB3Per100g = 19f,
                            VitaminB6Per100g = 4f,
                            VitaminB9Per100g = 27f,
                            VitaminCPer100g = 1f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 2f,
                            VitaminKPer100g = 1f,
                            ZincPer100g = 8f
                        },
                        new
                        {
                            Id = 8,
                            CalciumPer100g = 1f,
                            CaloriesPer100g = 86f,
                            CarbohydratesPer100g = 20f,
                            CopperPer100g = 8f,
                            FatsPer100g = 0.1f,
                            FiberPer100g = 1.8f,
                            FoodItemId = 8,
                            IronPer100g = 2f,
                            MagnesiumPer100g = 5f,
                            ManganesePer100g = 7f,
                            PhosphorusPer100g = 4f,
                            PotassiumPer100g = 9f,
                            ProteinsPer100g = 1.7f,
                            SaturatedFatPer100g = 0f,
                            SeleniumPer100g = 0f,
                            SodiumPer100g = 0f,
                            SugarPer100g = 0.9f,
                            VitaminAPer100g = 0f,
                            VitaminB12Per100g = 0f,
                            VitaminB1Per100g = 7f,
                            VitaminB2Per100g = 1f,
                            VitaminB3Per100g = 7f,
                            VitaminB6Per100g = 13f,
                            VitaminB9Per100g = 2f,
                            VitaminCPer100g = 12f,
                            VitaminDPer100g = 0f,
                            VitaminEPer100g = 0f,
                            VitaminKPer100g = 3f,
                            ZincPer100g = 2f
                        });
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.RestrictionFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DairyIntolerant")
                        .HasColumnType("bit");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<bool>("GlutenIntolerant")
                        .HasColumnType("bit");

                    b.Property<bool>("HeartProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("Keto")
                        .HasColumnType("bit");

                    b.Property<bool>("KidneyProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("Paleo")
                        .HasColumnType("bit");

                    b.Property<bool>("Pescetarian")
                        .HasColumnType("bit");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId")
                        .IsUnique();

                    b.ToTable("RestrictionsFoods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DairyIntolerant = true,
                            Diabetes = true,
                            FoodItemId = 1,
                            GlutenIntolerant = true,
                            HeartProblems = true,
                            Keto = true,
                            KidneyProblems = false,
                            Paleo = true,
                            Pescetarian = true,
                            Vegan = true,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 2,
                            DairyIntolerant = true,
                            Diabetes = true,
                            FoodItemId = 2,
                            GlutenIntolerant = true,
                            HeartProblems = true,
                            Keto = false,
                            KidneyProblems = false,
                            Paleo = true,
                            Pescetarian = true,
                            Vegan = true,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 3,
                            DairyIntolerant = true,
                            Diabetes = true,
                            FoodItemId = 3,
                            GlutenIntolerant = true,
                            HeartProblems = false,
                            Keto = true,
                            KidneyProblems = true,
                            Paleo = true,
                            Pescetarian = true,
                            Vegan = false,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 4,
                            DairyIntolerant = false,
                            Diabetes = true,
                            FoodItemId = 4,
                            GlutenIntolerant = true,
                            HeartProblems = true,
                            Keto = true,
                            KidneyProblems = true,
                            Paleo = false,
                            Pescetarian = true,
                            Vegan = false,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 5,
                            DairyIntolerant = false,
                            Diabetes = true,
                            FoodItemId = 5,
                            GlutenIntolerant = true,
                            HeartProblems = true,
                            Keto = true,
                            KidneyProblems = true,
                            Paleo = true,
                            Pescetarian = false,
                            Vegan = false,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 6,
                            DairyIntolerant = true,
                            Diabetes = true,
                            FoodItemId = 6,
                            GlutenIntolerant = true,
                            HeartProblems = true,
                            Keto = true,
                            KidneyProblems = true,
                            Paleo = true,
                            Pescetarian = true,
                            Vegan = false,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = 7,
                            DairyIntolerant = true,
                            Diabetes = true,
                            FoodItemId = 7,
                            GlutenIntolerant = false,
                            HeartProblems = true,
                            Keto = false,
                            KidneyProblems = false,
                            Paleo = false,
                            Pescetarian = true,
                            Vegan = true,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = 8,
                            DairyIntolerant = true,
                            Diabetes = false,
                            FoodItemId = 8,
                            GlutenIntolerant = true,
                            HeartProblems = true,
                            Keto = false,
                            KidneyProblems = false,
                            Paleo = false,
                            Pescetarian = true,
                            Vegan = true,
                            Vegetarian = true
                        });
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.RestrictionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DairyIntolerant")
                        .HasColumnType("bit");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("GlutenIntolerant")
                        .HasColumnType("bit");

                    b.Property<bool>("HeartProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("Keto")
                        .HasColumnType("bit");

                    b.Property<bool>("KidneyProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("Paleo")
                        .HasColumnType("bit");

                    b.Property<bool>("Pescetarian")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("RestrictionsUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.Diet", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.DietItem", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.Diet", "Diet")
                        .WithMany("DietItems")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DietAnalyzer.Models.Domains.FoodItem", "FoodItem")
                        .WithMany("DietItems")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DietAnalyzer.Models.Domains.Measure", "Measure")
                        .WithMany("DietItems")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("FoodItem");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.EvaluationResult", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.Diet", "Diet")
                        .WithMany("Summary")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.FoodItem", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.ApplicationUser", "User")
                        .WithMany("Foods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.FoodMeasure", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.FoodItem", "FoodItem")
                        .WithMany("Measures")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DietAnalyzer.Models.Domains.Measure", "Measure")
                        .WithMany("FoodItems")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.Measure", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.ApplicationUser", "User")
                        .WithMany("Measures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.NutritionDiet", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.Diet", "Diet")
                        .WithOne("Nutritions")
                        .HasForeignKey("DietAnalyzer.Models.Domains.NutritionDiet", "DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.NutritionFood", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.FoodItem", "FoodItem")
                        .WithOne("Nutrition")
                        .HasForeignKey("DietAnalyzer.Models.Domains.NutritionFood", "FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.RestrictionFood", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.FoodItem", "FoodItem")
                        .WithOne("Restrictions")
                        .HasForeignKey("DietAnalyzer.Models.Domains.RestrictionFood", "FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.RestrictionUser", b =>
                {
                    b.HasOne("DietAnalyzer.Models.Domains.ApplicationUser", "User")
                        .WithOne("Restrictions")
                        .HasForeignKey("DietAnalyzer.Models.Domains.RestrictionUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.Diet", b =>
                {
                    b.Navigation("DietItems");

                    b.Navigation("Nutritions");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.FoodItem", b =>
                {
                    b.Navigation("DietItems");

                    b.Navigation("Measures");

                    b.Navigation("Nutrition");

                    b.Navigation("Restrictions");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.Measure", b =>
                {
                    b.Navigation("DietItems");

                    b.Navigation("FoodItems");
                });

            modelBuilder.Entity("DietAnalyzer.Models.Domains.ApplicationUser", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Measures");

                    b.Navigation("Restrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
