@model DietAnalyzer.Models.ViewModels.DietViewModel

@{
    ViewBag.Title = "Edit Diet";
}

<h3 class="mb-2">Edit Diet</h3>
<div>
    Here you can edit your dietary plan. Use buttons to add or delete foods, then click Save.
</div>
<hr />
<br>

@using (Html.BeginForm("ManageDiet", "Diet", FormMethod.Post, new { id = "mainForm" }))
{
    @Html.HiddenFor(x => x.IsAdd)
    @Html.HiddenFor(x => x.PositionsToDelete)
    @Html.HiddenFor(x => x.Diet.Id)
    @Html.HiddenFor(x => x.Diet.UserId)
    @for (int i = 0; i < Model.AvailableFoods.Count; i++)
    {
        @Html.HiddenFor(x => x.AvailableFoods[i].Id)
        @Html.HiddenFor(x => x.AvailableFoods[i].Name)
        @Html.HiddenFor(x => x.AvailableFoods[i].Nutrition.Id)
    }
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="d-flex col-1 justify-content-end">
            @Html.LabelFor(x => x.Diet.Name):
        </div>
        <div class="d-flex col-8 col-md-6 col-lg-4 col-xl-3 p-0">
            @Html.TextBoxFor(x => x.Diet.Name, new { @class = "text-input-long" })
            <span asp-validation-for="@Model.Diet.Name" class="text-danger"></span>
        </div>
    </div>
    <br />
    <div class="row mt-2">
        <div class="d-flex col-2 offset-xs-0 offset-md-2 mt-2">
            <select name=@Html.NameFor(x => x.CurrentFoodId) id="foodDropDown" class="form-control">
                @foreach (var food in Model.AvailableFoods)
                {
                    <option value="@food.Id" data-class="food-icon"
                            data-style="background-image: url('@food.GetImageSrc()');">
                        @food.Name
                    </option>
                }
            </select>
        </div>
        <div class="d-flex col-xs-1 col-md-2 offset-md-1 offset-lg-0 mb-2">
            <button type="button" class="btn btn-outline-primary mt-2"
                    onclick="addNewRowDiet('AddNewPosition?index=', @Model.Diet.Id)">
                Add food
            </button>
        </div>
    </div>
    <br />
    <table id="Table">
        <tbody>
            @for (int i = 0; i < Model.DietItems.Count; i++)
            {
                <tr>
                    @Html.HiddenFor(x => Model.DietItems[i].Id)
                    @Html.HiddenFor(x => Model.DietItems[i].DietId)
                    @Html.HiddenFor(x => Model.DietItems[i].FoodItemId)
                    @Html.HiddenFor(x => Model.DietItems[i].FoodItem.Name)
                    <td class="col-2 ml-0 pl-0">
                        <div class="text-center pt-0" style="display: inline-block !important;">
                            <img src="@Model.DietItems[i].FoodItem.GetImageSrc()" class="foodImage" />
                            @if (Model.AvailableFoodIds.Contains(Model.DietItems[i].FoodItemId))
                            {
                                @Model.DietItems[i].FoodItem.Name
                            }
                            else
                            {
                                Model.SomeDietItemsAreRestricted = true;
                                @Model.DietItems[i].FoodItem.Name @:&#10071;
                            }
                        </div>
                    </td>
                    <td class="col-1 px-0 px-md-3">
                        @Html.TextBoxFor(x => Model.DietItems[i].Quantity,
                            new { @class = "numeric-input volatile-input" })
                        <span asp-validation-for="@Model.DietItems[i].Quantity"
                              class="text-danger"></span>
                    </td>
                    <td class="col-2 justify-content-start">
                        @Html.DropDownListFor(x => x.DietItems[i].MeasureId,
                        new SelectList(Model.AvailableMeasuresForEachFood[i], "Item1", "Item2"),
                        "-- select unit --",
                        new { @class = "form-control form-control-smallscreen-safe volatile-input" })
                        <span asp-validation-for="@Model.DietItems[i].MeasureId"
                              class="text-danger"></span>
                    </td>
                    <td class="col-4 col-md-3 col-xl-2 px-0 px-md-3 offset-md-1 text-right">
                        <button type="button" class="btn btn-outline-danger btn-sm"
                                onclick="deleteFood(this, 'DietItems')">
                            Delete position
                        </button>
                    </td>
                    <td class="col-auto"></td>
                </tr>
            }
        </tbody>
    </table>
    <br>
    @if (Model.SomeDietItemsAreRestricted)
    {
        <div class="small ml-3">&#10071; This food is forbidden by your dietary restrictions</div>
    }
    <br>
    <hr />
    <div class="row">
        <div class="d-flex col-xs-1 col-md-2 justify-content-lg-end  justify-content-xs-start">
            <button id="saveButton" type="submit" class="btn btn-outline-primary btn-lg mt-2" disabled="@Model.NoFoodsOnList">
                Save
            </button>
        </div>
        <div class="d-flex col-1 offset-md-2 offset-lg-1 justify-content-xs-end">
            <button type="button" class="btn btn-outline-primary btn-lg mt-2"
                    onclick="location.href='@Url.Action("DietList", "Diet")'">
                Cancel
            </button>
        </div>
    </div>
    <br />
}

@section Scripts
{
    <script type="text/javascript">

        function addNewRowDiet(urlString, dietId) {
            var fDrop = document.getElementById("foodDropDown");
            if (fDrop.options[fDrop.selectedIndex].text === "-- select food --") return;
            var foodId = fDrop.options[fDrop.selectedIndex].value;
            var rowIndex = $("#Table>tbody>tr").length;
            $.ajax({
                url: "@Url.Action("AddNewPosition", "Diet")",
                data: {
                    index: rowIndex,
                    dietId: dietId,
                    foodId: foodId
                },
                success: function (data) {
                    $('#saveButton').prop("disabled", false);
                    @Model.NoFoodsOnList = false;
                    /* note: Model.NoFoodsOnList has to be tracked separately
                        in case the controller wants to reload this form */
                    $('#Table > tbody').prepend(data);
                },
                error: function (result) {
                    JL().fatal("addNewRow (Manage Diet) - error: " + result);
                }
            });
        }

        function deleteFood(button, stringCode) {
            deleteRowUpdateHTML(button, stringCode, 'Table');
            if ($('#Table tbody tr').length == 0) {
                @Model.NoFoodsOnList = true;
                $('#saveButton').prop("disabled", true);
            }
        }

        // from jquery-ui documentation manual
        $(function () {
            $.widget("custom.iconselectmenu", $.ui.selectmenu, {
                _renderItem: function (ul, item) {
                    var li = $("<li>"),
                        wrapper = $("<div>", { text: item.label });
                    if (item.disabled) {
                        li.addClass("ui-state-disabled");
                    }
                    $("<span>", {
                        style: item.element.attr("data-style"),
                        "class": "ui-icon " + item.element.attr("data-class")
                    })
                        .appendTo(wrapper);
                    return li.append(wrapper).appendTo(ul);
                }
            });
            $("#foodDropDown")
                .iconselectmenu()
                .iconselectmenu("menuWidget")
                .addClass("ui-menu-icons food-icon");
        });

    </script>
}